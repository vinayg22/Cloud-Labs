#Implement DevOps Workflows in Google Cloud: Challenge Lab

# Task 1. Create the lab resources
# Step 1: Enable APIs
gcloud services enable container.googleapis.com \
    cloudbuild.googleapis.com \
    sourcerepo.googleapis.com

# Step 2: Add Kubernetes Developer Role
export PROJECT_ID=$(gcloud config get-value project)
gcloud projects add-iam-policy-binding $PROJECT_ID \
--member=serviceAccount:$(gcloud projects describe $PROJECT_ID \
--format="value(projectNumber)")@cloudbuild.gserviceaccount.com --role="roles/container.developer"

# Step 3: Configure Git
git config --global user.email <email>
git config --global user.name <name>

# Step 4: Create Artifact Registry
gcloud artifacts repositories create my-repository \
    --repository-format=docker \
    --location=us-west1 \
    --description="Docker repository for storing container images"

# Step 5: Create GKE Cluster if get a error remove cluster-version attribute, it will take automatically newer version
gcloud container clusters create hello-cluster \
    --zone=us-west1-a \
    --release-channel=regular \
    --cluster-version=1.29 \
    --enable-autoscaling \
    --min-nodes=2 \
    --max-nodes=6 \
    --num-nodes=3

# Step 6: Create Namespaces
kubectl create namespace prod
kubectl create namespace dev


#OPTIONAL
# Function to check if a namespace exists
namespace_exists() {
    local namespace="$1"
    kubectl get namespace "$namespace" &> /dev/null
}

# Create production namespace if it doesn't exist
if ! namespace_exists "prod"; then
    echo "Creating 'prod' namespace..."
    kubectl create namespace prod
else
    echo "'prod' namespace already exists."
fi

# Sleep for 10 seconds
sleep 10

# Create development namespace if it doesn't exist
if ! namespace_exists "dev"; then
    echo "Creating 'dev' namespace..."
    kubectl create namespace dev
else
    echo "'dev' namespace already exists."
fi

# Sleep for 10 seconds
sleep 10

# Continue with the rest of your script...
# Add your additional kubectl commands here



# Task 2. Create a repository in Cloud Source Repositories

# Step 1: Create the Cloud Source Repository
gcloud source repos create sample-app

# Step 2: Clone the Repository
gcloud source repos clone sample-app --project=$PROJECT_ID

# Step 3: Copy Sample Code
cd ~
gsutil cp -r gs://spls/gsp330/sample-app/* sample-app

# Step 4: Update Configuration Files
export REGION="us-west1"
export ZONE="us-west1-a"
for file in sample-app/cloudbuild-dev.yaml sample-app/cloudbuild.yaml; do
    sed -i "s/<your-region>/${REGION}/g" "$file"
    sed -i "s/<your-zone>/${ZONE}/g" "$file"
done

# Step 5: Commit to Master Branch
cd sample-app
git add .
git commit -m "Initial commit with sample Go application code"
git push origin master

# Step 6: Create and Push Dev Branch
git checkout -b dev
git add .
git commit -m "Add sample Go application code to dev branch"
git push origin dev

# Step 7: Verify the Branches
git branch -a




# Task 3. Create the Cloud Build Triggers


gcloud builds triggers create cloud-source-repositories \
    --name="sample-app-prod-deploy" \
    --service-account="projects/$PROJECT_ID/serviceAccounts/$PROJECT_ID@$PROJECT_ID.iam.gserviceaccount.com" \
    --description="Cloud Build Trigger for production deployment" \
    --repo="sample-app" \
    --branch-pattern="^master$" \
    --build-config="cloudbuild.yaml"



gcloud builds triggers create cloud-source-repositories \
    --name="sample-app-dev-deploy" \
    --service-account="projects/$PROJECT_ID/serviceAccounts/$PROJECT_ID@$PROJECT_ID.iam.gserviceaccount.com" \
    --description="Cloud Build Trigger for development deployment" \
    --repo="sample-app" \
    --branch-pattern="^dev$" \
    --build-config="cloudbuild-dev.yaml"





#TASK 4:-

COMMIT_ID="$(git rev-parse --short=7 HEAD)"
gcloud builds submit --tag="${REGION}-docker.pkg.dev/${PROJECT_ID}/$REPO/hello-cloudbuild:${COMMIT_ID}" .

# Capture the IMAGES value into a variable
EXPORTED_IMAGE="$(gcloud builds submit --tag="${REGION}-docker.pkg.dev/${PROJECT_ID}/$REPO/hello-cloudbuild:${COMMIT_ID}" . | grep IMAGES | awk '{print $2}')"

# Print the value of the variable
echo "EXPORTED_IMAGE: ${EXPORTED_IMAGE}"

git checkout dev



sed -i "9c\    args: ['build', '-t', '$REGION-docker.pkg.dev/$PROJECT_ID/my-repository/hello-cloudbuild-dev:v1.0', '.']" cloudbuild-dev.yaml

sed -i "13c\    args: ['push', '$REGION-docker.pkg.dev/$PROJECT_ID/my-repository/hello-cloudbuild-dev:v1.0']" cloudbuild-dev.yaml

sed -i "17s|        image: <todo>|        image: $REGION-docker.pkg.dev/$PROJECT_ID/my-repository/hello-cloudbuild-dev:v1.0|" dev/deployment.yaml


git add .
git commit -m "Subscribe to quicklab" 
git push -u origin dev

sleep 10


git checkout master

kubectl expose deployment development-deployment -n dev --name=dev-deployment-service --type=LoadBalancer --port 8080 --target-port 8080


sed -i "11c\    args: ['build', '-t', '$REGION-docker.pkg.dev/\$PROJECT_ID/my-repository/hello-cloudbuild:v1.0', '.']" cloudbuild.yaml

sed -i "16c\    args: ['push', '$REGION-docker.pkg.dev/\$PROJECT_ID/my-repository/hello-cloudbuild:v1.0']" cloudbuild.yaml

sed -i "17c\        image:  $REGION-docker.pkg.dev/$PROJECT_ID/my-repository/hello-cloudbuild:v1.0" prod/deployment.yaml



git add .
git commit -m "Subscribe to quicklab" 
git push -u origin master

sleep 10

kubectl expose deployment production-deployment -n prod --name=prod-deployment-service --type=LoadBalancer --port 8080 --target-port 8080


#TASK 5:

git checkout dev



sed -i '28a\	http.HandleFunc("/red", redHandler)' main.go


sed -i '32a\
func redHandler(w http.ResponseWriter, r *http.Request) { \
	img := image.NewRGBA(image.Rect(0, 0, 100, 100)) \
	draw.Draw(img, img.Bounds(), &image.Uniform{color.RGBA{255, 0, 0, 255}}, image.ZP, draw.Src) \
	w.Header().Set("Content-Type", "image/png") \
	png.Encode(w, img) \
}' main.go



sed -i "9c\    args: ['build', '-t', '$REGION-docker.pkg.dev/\$PROJECT_ID/my-repository/hello-cloudbuild-dev:v2.0', '.']" cloudbuild-dev.yaml

sed -i "13c\    args: ['push', '$REGION-docker.pkg.dev/\$PROJECT_ID/my-repository/hello-cloudbuild-dev:v2.0']" cloudbuild-dev.yaml

sed -i "17c\        image: $REGION-docker.pkg.dev/$PROJECT_ID/my-repository/hello-cloudbuild:v2.0" dev/deployment.yaml


git add .
git commit -m "Subscribe to quicklab" 
git push -u origin dev

sleep 10


git checkout master


sed -i '28a\	http.HandleFunc("/red", redHandler)' main.go


sed -i '32a\
func redHandler(w http.ResponseWriter, r *http.Request) { \
	img := image.NewRGBA(image.Rect(0, 0, 100, 100)) \
	draw.Draw(img, img.Bounds(), &image.Uniform{color.RGBA{255, 0, 0, 255}}, image.ZP, draw.Src) \
	w.Header().Set("Content-Type", "image/png") \
	png.Encode(w, img) \
}' main.go



sed -i "11c\    args: ['build', '-t', '$REGION-docker.pkg.dev/\$PROJECT_ID/my-repository/hello-cloudbuild:v2.0', '.']" cloudbuild.yaml

sed -i "16c\    args: ['push', '$REGION-docker.pkg.dev/\$PROJECT_ID/my-repository/hello-cloudbuild:v2.0']" cloudbuild.yaml

sed -i "17c\        image: $REGION-docker.pkg.dev/$PROJECT_ID/my-repository/hello-cloudbuild:v2.0" prod/deployment.yaml


git add .
git commit -m "Subscribe to quicklab" 
git push -u origin master




kubectl -n prod get pods -o jsonpath --template='{range .items[*]}{.metadata.name}{"\t"}{"\t"}{.spec.containers[0].image}{"\n"}{end}'
kubectl expose deployment production-deployment -n prod --name=prod-deployment-service --type=LoadBalancer --port 8080 --target-port 8080



NAMESPACE="prod"
DEPLOYMENT_NAME="production-deployment"
SERVICE_NAME="prod-deployment-service"
PORT=8080
TARGET_PORT=8080

# Function to expose the deployment and check if it succeeded
expose_deployment() {
  kubectl expose deployment $DEPLOYMENT_NAME -n $NAMESPACE --name=$SERVICE_NAME --type=LoadBalancer --port=$PORT --target-port=$TARGET_PORT
  return $?
}

# Loop until the expose command succeeds
until expose_deployment; do
  echo "Failed to expose deployment. Retrying in 5 seconds..."
  sleep 5
done

echo "Successfully exposed the deployment."

# Undo the deployment rollout
kubectl -n $NAMESPACE rollout undo deployment/$DEPLOYMENT_NAME

if [ $? -eq 0 ]; then
  echo "Successfully rolled back the deployment."
else
  echo "Failed to roll back the deployment."
fi


sleep 100
kubectl -n $NAMESPACE rollout undo deployment/$DEPLOYMENT_NAME
sleep 60
kubectl -n $NAMESPACE rollout undo deployment/$DEPLOYMENT_NAME


cd sample-app
kubectl -n prod rollout undo deployment/production-deployment
